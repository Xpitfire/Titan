using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Titan.Core.Graph;

COMPILER Prototxt

CHARACTERS
	letter     = 'A'..'Z' + 'a'..'z' + '_'.
	digit      = '0'..'9'.
	nzdigit    = '1'..'9'.
	notQuote   = ANY - '"' - "\r\n".


	tab        = '\t'.
	cr         = '\r'.
	lf         = '\n'.
	newLine    = cr + lf.
	notNewLine = ANY - newLine .
	ws         = " " + tab + '\u000b' + '\u000c'.

TOKENS
	ident	 = letter { letter | digit }.
	floatcon = ( '.' digit {digit} [('e'|'E')  ['+'|'-'] digit {digit}]
						 | digit {digit} '.' {digit} [('e'|'E')  ['+'|'-'] digit {digit}]
						 | digit {digit} ('e'|'E')  ['+'|'-'] digit {digit}
						 )
						 ['f'|'l'|'F'|'L'].
	intcon   = digit {digit}.
	string   = '"' {notQuote} '"'.        // no check for valid escape sequences

	true	 = "true".
	false	 = "false".
	colon	 = ":".
	lbrace	 = "{".
	rbrace	 = "}".

COMMENTS FROM "#" TO lf

IGNORE tab + cr + lf

PRODUCTIONS

//---------- Caffe Protxt Unit ----------

Prototxt
=                                               (. Properties = new Dictionary<string, dynamic>(); 
                                                   string ident = null;
                                                   dynamic value = null;
                                                 .)
    Statement<out ident, out value>             (. InsertValue(ident, value, Properties); .)
    { Statement<out ident, out value>           (. InsertValue(ident, value, Properties); .)
    }
.

Statement<out string ident, out dynamic value>
=                                               (. Dictionary<string, dynamic> args = null; 
                                                   dynamic res = null;
                                                   ident = null;
                                                   value = null;
                                                 .)
    ident                                       (. ident = t.val; .)
    ( Property<out res>                         (. value = res; .)
      | Compound<out args>                      (. value = args; .)
      )
.

Compound<.out Dictionary<string, dynamic> args.>
=                                               (. args = new Dictionary<string, dynamic>(); 
                                                   string ident = null;
                                                   dynamic value = null;
                                                 .)
	lbrace
	Statement<out ident, out value>             (. InsertValue(ident, value, args); .)
    { Statement<out ident, out value>           (. InsertValue(ident, value, args); .)
    }
	rbrace
.

//---------- Properties ----------

Property<out dynamic res>
=                                               (. Dictionary<string, dynamic> args = null; 
                                                   res = null;
                                                 .)
	colon (( string
             | ident
             | intcon
             | floatcon
             | true
             | false 
           )                                    (. res = t.val; .)
             | Compound<out args>               (. res = args; .)
          )
.

END Prototxt.